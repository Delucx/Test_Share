import fitz  # PyMuPDF
import pandas as pd
from tkinter import Tk
from tkinter.filedialog import askopenfilename, asksaveasfilename

# Extract text containing "*/" from a PDF and align by vertical position
def extract_filtered_text(pdf_path):
    doc = fitz.open(pdf_path)
    filtered_text_blocks = []
    
    for page_num in range(doc.page_count):
        page = doc.load_page(page_num)
        blocks = page.get_text("dict")["blocks"]
        
        for block in blocks:
            if "lines" in block:
                for line in block["lines"]:
                    for span in line["spans"]:
                        text = span["text"]
                        bbox = span["bbox"]  # Bounding box for the text [x0, y0, x1, y1]
                        y0 = bbox[1]
                        
                        # Only extract text that contains "*/"
                        if "*/" in text:
                            filtered_text_blocks.append((text, y0))
    
    # Sort the filtered text blocks by the vertical position (y0)
    filtered_text_blocks.sort(key=lambda x: x[1])
    
    # Extract the text into rows, maintaining the order
    extracted_rows = [block[0] for block in filtered_text_blocks]
    
    return extracted_rows

# Save filtered text to an Excel file
def save_to_excel(filtered_text, excel_path):
    # Create a DataFrame with one column for the filtered text
    df = pd.DataFrame({
        "Filtered Text": filtered_text
    })
    df.to_excel(excel_path, index=False)

# GUI file picker
def pick_file():
    # Hide the main Tkinter window
    root = Tk()
    root.withdraw()
    
    # Open file dialog to pick a PDF file
    pdf_path = askopenfilename(
        title="Select PDF File",
        filetypes=[("PDF Files", "*.pdf")]
    )
    
    if pdf_path:
        # Extract filtered text containing "*/"
        filtered_text = extract_filtered_text(pdf_path)
        
        # Open save dialog to choose Excel file location
        excel_path = asksaveasfilename(
            title="Save Excel File",
            defaultextension=".xlsx",
            filetypes=[("Excel Files", "*.xlsx")]
        )
        
        if excel_path:
            # Save to Excel
            save_to_excel(filtered_text, excel_path)
            print(f"Data successfully extracted and saved to {excel_path}")
        else:
            print("Excel file save cancelled.")
    else:
        print("PDF file selection cancelled.")

# Main function
if __name__ == "__main__":
    pick_file()
