import fitz  # PyMuPDF
import pandas as pd
from tkinter import Tk
from tkinter.filedialog import askopenfilename, asksaveasfilename

# Extract left and right side text from a PDF and align by vertical position
def extract_left_right_text_aligned(pdf_path):
    doc = fitz.open(pdf_path)
    left_text_blocks = []
    right_text_blocks = []
    
    for page_num in range(doc.page_count):
        page = doc.load_page(page_num)
        blocks = page.get_text("dict")["blocks"]
        
        # Define the middle of the page to separate left and right
        page_width = page.rect.width
        mid_x = page_width / 2
        
        for block in blocks:
            if "lines" in block:
                for line in block["lines"]:
                    for span in line["spans"]:
                        text = span["text"]
                        bbox = span["bbox"]  # Bounding box for the text [x0, y0, x1, y1]
                        x0, y0 = bbox[0], bbox[1]
                        
                        # If text is in the left half
                        if x0 < mid_x:
                            left_text_blocks.append((text, y0))
                        # If text is in the right half
                        else:
                            right_text_blocks.append((text, y0))
    
    # Sort both lists by the vertical position (y0)
    left_text_blocks.sort(key=lambda x: x[1])
    right_text_blocks.sort(key=lambda x: x[1])
    
    # Align text blocks by vertical position
    aligned_left = []
    aligned_right = []
    
    left_idx, right_idx = 0, 0
    tolerance = 10  # Tolerance for vertical alignment in points
    
    while left_idx < len(left_text_blocks) or right_idx < len(right_text_blocks):
        if left_idx < len(left_text_blocks) and (right_idx >= len(right_text_blocks) or left_text_blocks[left_idx][1] <= right_text_blocks[right_idx][1] + tolerance):
            aligned_left.append(left_text_blocks[left_idx][0])
            if right_idx < len(right_text_blocks) and abs(left_text_blocks[left_idx][1] - right_text_blocks[right_idx][1]) <= tolerance:
                aligned_right.append(right_text_blocks[right_idx][0])
                right_idx += 1
            else:
                aligned_right.append('')
            left_idx += 1
        else:
            aligned_left.append('')
            aligned_right.append(right_text_blocks[right_idx][0])
            right_idx += 1
    
    return aligned_left, aligned_right

# Save aligned left and right side text to an Excel file
def save_to_excel(left_text, right_text, excel_path):
    df = pd.DataFrame({
        "Left Side": left_text,
        "Right Side": right_text
    })
    df.to_excel(excel_path, index=False)

# GUI file picker
def pick_file():
    # Hide the main Tkinter window
    root = Tk()
    root.withdraw()
    
    # Open file dialog to pick a PDF file
    pdf_path = askopenfilename(
        title="Select PDF File",
        filetypes=[("PDF Files", "*.pdf")]
    )
    
    if pdf_path:
        # Extract aligned left and right side text
        left_text, right_text = extract_left_right_text_aligned(pdf_path)
        
        # Open save dialog to choose Excel file location
        excel_path = asksaveasfilename(
            title="Save Excel File",
            defaultextension=".xlsx",
            filetypes=[("Excel Files", "*.xlsx")]
        )
        
        if excel_path:
            # Save to Excel
            save_to_excel(left_text, right_text, excel_path)
            print(f"Data successfully extracted and saved to {excel_path}")
        else:
            print("Excel file save cancelled.")
    else:
        print("PDF file selection cancelled.")

# Main function
if __name__ == "__main__":
    pick_file()
